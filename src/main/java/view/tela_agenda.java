/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import Validacoes.ValidarEmail;
import Validacoes.ValidarNome;
import Validacoes.ValidarTelefone;
import com.mycompany.appagenda.ConexaoBD;
import com.mycompany.appagenda.Contato;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Ernane
 */
public class tela_agenda extends javax.swing.JFrame {
    /**

     * Creates new form tela_agenda
     */
    public tela_agenda() {
        initComponents();
        exibirContatos();
        //esconderCampos();
        desabilitarCampos();
        setLocationRelativeTo(null);
        setResizable(true);
        jMenu1.setVisible(false);
        
        tb_contatos.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tabelaMouseReleased(evt);
            }
        });
    }
    public void atualizarLista() {
        exibirContatos(); 
    }
    
    public void habilitarCampos() {
        
        jLabel1.setEnabled(true);
        jLabel2.setEnabled(true);
        jLabel3.setEnabled(true);
        jtf_nome.setEnabled(true);
        jtf_email.setEnabled(true);
        jtf_telefone.setEnabled(true);
        jb_salvar.setEnabled(true);
        jb_excluir.setEnabled(true);        
    }
    
    public void desabilitarCampos() {
        
        jLabel1.setEnabled(false);
        jLabel2.setEnabled(false);
        jLabel3.setEnabled(false);
        jtf_nome.setEnabled(false);
        jtf_email.setEnabled(false);
        jtf_telefone.setEnabled(false);
        jb_salvar.setEnabled(false);
        jb_excluir.setEnabled(false);        
    }
    
    public void desabilitarEditar() {
        
        jLabel1.setEnabled(false);
        jLabel2.setEnabled(false);
        jLabel3.setEnabled(false);
        jtf_nome.setEnabled(false);
        jtf_email.setEnabled(false);
        jtf_telefone.setEnabled(false);
        jb_salvar.setEnabled(false);
        jb_excluir.setEnabled(true); 
    }
    
    public void exibirCampos() {
        
        jLabel1.setVisible(true);
        jLabel2.setVisible(true);
        jLabel3.setVisible(true);
        jtf_nome.setVisible(true);
        jtf_email.setVisible(true);
        jtf_telefone.setVisible(true);
        jb_salvar.setVisible(true);
        jb_excluir.setVisible(true);
        
    }
    
    public void esconderCampos() {
        
        jtf_telefone.setVisible(false);
        jtf_nome.setVisible(false);
        jtf_email.setVisible(false);
        jLabel1.setVisible(false);
        jLabel2.setVisible(false);
        jLabel3.setVisible(false);
        jb_excluir.setVisible(false);
        jb_salvar.setVisible(false);
        
    }
    
    public void limpaCampos() {        
        jtf_nome.setText("");
        jtf_email.setText("");
        jtf_telefone.setText("");
    }
    
    private void tabelaMouseReleased(java.awt.event.MouseEvent evt) {                                      
    
    int quantidadeLinhas = tb_contatos.getSelectedRowCount();
        
    if (quantidadeLinhas == 1) {
        int linhaSelecionada = tb_contatos.getSelectedRow();
        DefaultTableModel dtmArea = (DefaultTableModel) tb_contatos.getModel();
        
        String nomeAntigo = dtmArea.getValueAt(linhaSelecionada, 0).toString();
        String emailAntigo = dtmArea.getValueAt(linhaSelecionada, 1).toString();
        String telefoneAntigo = dtmArea.getValueAt(linhaSelecionada, 2).toString();
        
        jtf_nome.setText(nomeAntigo);
        jtf_email.setText(emailAntigo);
        jtf_telefone.setText(telefoneAntigo);
        
        // exibirCampos();
        habilitarCampos(); 
    } else if (quantidadeLinhas > 1) {
        desabilitarEditar(); // Trabalhando nisso, permissao de excluir varios contatos
        //desabilitarCampos();
    } 
}



    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tb_contatos = new javax.swing.JTable();
        jtf_nome = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jtf_email = new javax.swing.JTextField();
        jtf_telefone = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jb_salvar = new javax.swing.JToggleButton();
        jb_excluir = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Agenda");

        tb_contatos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Nome", "Email", "Telefone"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tb_contatos);
        if (tb_contatos.getColumnModel().getColumnCount() > 0) {
            tb_contatos.getColumnModel().getColumn(0).setResizable(false);
            tb_contatos.getColumnModel().getColumn(1).setResizable(false);
            tb_contatos.getColumnModel().getColumn(2).setResizable(false);
        }

        jtf_nome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtf_nomeActionPerformed(evt);
            }
        });

        jLabel1.setText("Nome:");

        jLabel2.setText("Email:");

        jtf_telefone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtf_telefoneActionPerformed(evt);
            }
        });

        jLabel3.setText("Telefone:");

        jb_salvar.setText("Salvar");
        jb_salvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_salvarActionPerformed(evt);
            }
        });

        jb_excluir.setText("Excluir");
        jb_excluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_excluirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(jtf_telefone, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addGap(30, 30, 30)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jtf_nome, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jtf_email, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(66, 66, 66)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jb_excluir)
                            .addComponent(jb_salvar))))
                .addContainerGap(63, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jtf_nome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jb_salvar)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(jtf_email, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jtf_telefone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jb_excluir)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE))
        );

        jMenu1.setText("Opções");

        jMenuItem1.setText("Cadastro");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jtf_nomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtf_nomeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtf_nomeActionPerformed

    private void jtf_telefoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtf_telefoneActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtf_telefoneActionPerformed

    private void jb_salvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_salvarActionPerformed
        int linhaSelecionada = tb_contatos.getSelectedRow();
        if (linhaSelecionada != -1) {
        //   habilitarCampos();
            editarContato();
       } else {
           JOptionPane.showMessageDialog(null, "Selecione um contato na tabela para editar.");
        }           
    }//GEN-LAST:event_jb_salvarActionPerformed

    public void editarContato() {
        try {
            Connection c = con.connect();

            DefaultTableModel dtmArea = (DefaultTableModel) tb_contatos.getModel();
            int linhaSelecionada = tb_contatos.getSelectedRow();

            String nomeAntigo = dtmArea.getValueAt(linhaSelecionada, 0).toString();
            String emailAntigo = dtmArea.getValueAt(linhaSelecionada, 1).toString();
            String telefoneAntigo = dtmArea.getValueAt(linhaSelecionada, 2).toString();

            String novoNome = jtf_nome.getText();
            String novoEmail = jtf_email.getText();
            String novoTelefone = jtf_telefone.getText();

            // Verificar se o nome está vazio antes de continuar
            if (novoNome.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Nome não pode estar em branco.");
                return;
            }

            // Verificar a validação do nome antes de criar o objeto Contato
            if (ValidarNome.validarNome(novoNome) 
             && ValidarEmail.validarEmail(novoEmail)
             && ValidarTelefone.validarTelefone(novoTelefone)) {
                // Criar um novo objeto Contato e usar setNome para aplicar a validação
                Contato contatoAtualizado = new Contato(novoNome, novoEmail, novoTelefone);

                int confirm = JOptionPane.showConfirmDialog(
                        null,
                        "Tem certeza que deseja editar o contato?",
                        "Confirmação de edição",
                        JOptionPane.YES_NO_OPTION);

                if (confirm == JOptionPane.YES_OPTION) {
                    // Atualizar os campos na interface gráfica com os valores antigos
                    jtf_nome.setText(nomeAntigo);
                    jtf_email.setText(emailAntigo);
                    jtf_telefone.setText(telefoneAntigo);

                    // Realizar a atualização no banco de dados
                    PreparedStatement atualizarStmt = c.prepareStatement("UPDATE pessoa SET nome = ?, email = ?, telefone = ? WHERE nome = ? AND email = ? AND telefone = ?");
                    atualizarStmt.setString(1, novoNome);
                    atualizarStmt.setString(2, novoEmail);
                    atualizarStmt.setString(3, novoTelefone);
                    atualizarStmt.setString(4, nomeAntigo);
                    atualizarStmt.setString(5, emailAntigo);
                    atualizarStmt.setString(6, telefoneAntigo);

                    atualizarStmt.executeUpdate();

                    JOptionPane.showMessageDialog(null, "Registro atualizado com sucesso.");

                    atualizarStmt.close();
                    con.closeConnection();

                    exibirContatos();
                    //esconderCampos();
                    desabilitarCampos();
                    limpaCampos();
                }
            } 
            //else {
            //    JOptionPane.showMessageDialog(null, "Nome inválido. Contato não editado.");
            //}
        } catch (SQLException e) {
            System.err.println("Erro ao atualizar registro");
            System.err.println(e.getMessage());
        }
}




    
    private void jb_excluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_excluirActionPerformed
        int confirm = JOptionPane.showConfirmDialog(
            null,
            "Tem certeza que deseja excluir o(s) contato(s)?",
            "Confirmação de exclusão",
            JOptionPane.YES_NO_OPTION);

    if (confirm == JOptionPane.YES_OPTION) {
        int[] linhasSelecionadas = tb_contatos.getSelectedRows();

        if (linhasSelecionadas.length > 0) {
            try {
                Connection c = con.connect();
                PreparedStatement excluirStmt = c.prepareStatement("DELETE FROM pessoa WHERE nome = ? AND email = ? AND telefone = ?");

                for (int linha : linhasSelecionadas) {
                    String nome = tb_contatos.getValueAt(linha, 0).toString();
                    String email = tb_contatos.getValueAt(linha, 1).toString();
                    String telefone = tb_contatos.getValueAt(linha, 2).toString();

                    excluirStmt.setString(1, nome);
                    excluirStmt.setString(2, email);
                    excluirStmt.setString(3, telefone);

                    excluirStmt.addBatch(); 
                }

                excluirStmt.executeBatch(); 

                JOptionPane.showMessageDialog(null, "Contato(s) excluído(s) com sucesso.");

                excluirStmt.close();
                con.closeConnection();

                exibirContatos();
                desabilitarCampos();
                limpaCampos();
            } catch (SQLException e) {
                System.err.println("Erro ao excluir contatos");
                System.err.println(e.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(null, "Selecione pelo menos um contato para excluir.");
        }  
    }//GEN-LAST:event_jb_excluirActionPerformed
        else{
            JOptionPane.showMessageDialog(null, "Registro não excluido.");
        }
    } 
        //JOptionPane.showMessageDialog(null, "Registro não excluido");

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        tela_cadastro cadastro = new tela_cadastro();
        cadastro.setVisible(true);
        //this.dispose();        
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    ConexaoBD con = new ConexaoBD();
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(tela_agenda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(tela_agenda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(tela_agenda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(tela_agenda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new tela_agenda().setVisible(true);
            }
        });
    }
    
    public ArrayList<Contato> listarContatos() {
        ArrayList<Contato> contatos = new ArrayList<>();

        try {
            Connection c = con.connect();
            PreparedStatement exibirStmt = c.prepareStatement("SELECT nome, email, telefone FROM pessoa ORDER BY nome ASC");
            ResultSet resultSet = exibirStmt.executeQuery();

            while (resultSet.next()) {
                String nome = resultSet.getString("nome");
                String email = resultSet.getString("email");
                String telefone = resultSet.getString("telefone");
                
                Contato contato = new Contato(nome, email, telefone);
                contatos.add(contato);
            }

            resultSet.close();
            exibirStmt.close();
        } catch (SQLException e) {
            System.err.println("Erro ao exibir contatos");
            System.err.println(e.getMessage());
        } finally {
            con.closeConnection();
        }

        return contatos;
    }
    
    public void exibirContatos() {
        try {
            ArrayList<Contato> contatos = listarContatos();

            DefaultTableModel dtmArea = (DefaultTableModel) tb_contatos.getModel();
            dtmArea.setRowCount(0); // Limpa as linhas existentes na tabela

            for (Contato contato : contatos) {
                Object[] dados = {contato.getNome(), contato.getEmail(), contato.getTelefone()};
                dtmArea.addRow(dados);
            }

        } catch (Exception e) {
            System.err.println("Erro ao exibir contatos");
            System.err.println(e.getMessage());
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jb_excluir;
    private javax.swing.JToggleButton jb_salvar;
    private javax.swing.JTextField jtf_email;
    private javax.swing.JTextField jtf_nome;
    private javax.swing.JTextField jtf_telefone;
    private javax.swing.JTable tb_contatos;
    // End of variables declaration//GEN-END:variables
}
